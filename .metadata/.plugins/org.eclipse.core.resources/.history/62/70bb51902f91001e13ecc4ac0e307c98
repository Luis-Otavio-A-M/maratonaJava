package maratona.classesUtilitarias.nio.teste;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.concurrent.TimeUnit;

public class BasicFilesAtributtesTeste2 {
	public static void main(String[] args) throws IOException {
		Path path = Paths.get("home/new.txt");
		/*
		 * Pelo que entendi aqui, passamos para o método o path
		 * do qual queremos os atributos do arquivo, e junto a isso,
		 * passamos a classe que queremos que o objeto retornado seja do mesmo tipo
		 * Nesse caso, como passamos uma interface, ou se fosse uma classe pai, todos 
		 * que implementarem essa interface/ extender a classe poderão ser retornados,
		 * por causa do polimorfismo. Assim, neste caso, eu não preciso me preocupar, com qual
		 * SO está sendo executada a aplicação, pois sendo retornado um DosFileAtributtes ou
		 * PosixFilesAtributtes, por ser uma interface, poderemos usar o mesmo método para qualquer objeto.
		 */
		BasicFileAttributes fileAttributes = Files.readAttributes(path, BasicFileAttributes.class);
		Instant timeCriacaInstant = fileAttributes.creationTime().toInstant();
		LocalDateTime timeCriacao = LocalDateTime.ofInstant(timeCriacaInstant, ZoneId.systemDefault());
		FileTime timeUltimoAcesso = fileAttributes.lastAccessTime(); 
		FileTime timeUltimoModificacao = fileAttributes.lastModifiedTime();
		
		/*
		 * Pelo que vi, a classe FileTime trabalha com o horário na zona UTC, então, se necessário,
		 * deve ser feita a conversão para a zoneId referente onde o sistema se encontra.
		 */
		System.out.println("timeCriacao: " + timeCriacao);
		System.out.println("timeUltimoAcesso: " + timeUltimoAcesso);
		System.out.println("timeUltimoModificacao: " + timeUltimoModificacao);
	
		/*
		 * Mas a interface acima só nos permite ter acesso aos atributos, caso queiramos alterar essas informações
		 * como faríamos isso? Para isso existe a interface BasicFileAtributtesView, que além do que podemos fazer com
		 * a interface anterior, nos permite fazer alterações nos atributos também.
		 */
		BasicFileAttributeView fileAttributeView = Files.getFileAttributeView(path, BasicFileAttributeView.class);
		
		
		/*
		 * setTimes, que é o método que permite fazer a alteração na data, recebe três parâmetros, 
		 * última modificação, último acesso e data da criação. É necessário que sejam passados os
		 * 3 parâmetros. 
		 */
		FileTime dataCriacao = fileAttributes.creationTime();
		fileAttributeView.setTimes(timeUltimoModificacao, timeUltimoAcesso, timeUltimoModificacao);
	}
}
