package maratona.classesUtilitarias.nio.teste;

import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;

class ListAllFiles2 extends SimpleFileVisitor<Path>{
		@Override
		public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)  {
			/*
			 * VisitFile como o nome sugere, este método é invocado no momento em que o 
			 * arquivo é visitado, a implentação fica a respeito do desenvolvedor.
			 */
			//System.out.println(file);
			return FileVisitResult.CONTINUE;
		}
		
		@Override
		public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {
			/*
			 * preVisitDirectory, pelo que entendi, é invocado 
			 */
			//System.out.println("Pre visit: " + dir);
			return FileVisitResult.CONTINUE;
		}
}

public class SimpleFileVisitorsTeste2 {
	public static void main(String[] args) throws IOException {
		Path root = Paths.get("pasta");
		Files.walkFileTree(root, new ListAllFiles2());
	}
}
